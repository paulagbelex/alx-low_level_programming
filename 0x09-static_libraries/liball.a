!<arch>
0-isupper.c/    0           0     0     644     284       `
#include "main.h"
#include <ctype.h>

/**
 * _isupper - a function that checks for uppercase character
 * @c: the int for the paramaters of my function
 * Return: 1 if c is uppercase, otherwise 0
 */
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	return (0);
}
0-memset.c/     0           0     0     644     429       `
#include "main.h"

/**
 * _memset - function fill the first @n bytes of the memory area pointed
 * to by @s with the constant byte @b
 *
 * @n: bytes of the memory area pointed to by @s
 *
 * @s: with the constant byte @b
 *
 * @b: memory area pointer
 *
 * Return: a pointer to the memory area @s
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{
		s[i] = b;
		i++;
	}

	return (s);
}

0-strcat.c/     0           0     0     644     328       `
#include "main.h"

/**
 * _strcat - this is a funcion strcat
 * @dest: first param
 * @src: second param
 * Return: always 0
 */
char *_strcat(char *dest, char *src)
{
	int len = 0, i;

	while (dest[len])
	{
		len++;
	}
	for (i = 0; src[i] != 0; i++)
	{
		dest[len] = src[i];
		len += 1;
	}
	dest[len] = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     574       `
#include "main.h"
/**
 * _atoi - entry point
 *
 * @s: hold the value
 *
 * Return: always 0
 */
int _atoi(char *s)
{
	unsigned int count = 0, size = 0, j = 0, k = 1, m = 1, i;

	while (*(s + count) != '\0')
	{
		if (size > 0 && (*(s + count) < '0' || *(s + count) > '9'))
		{
			break;
		}
		if (*(s + count) == '-')
		{
			k *= -1;
		}
		if ((*(s + count) >= '0') && (*(s + count) <= '9'))
		{
			if (size > 0)
			{
				m *= 10;
			}
			size++;
		}
		count++;
	}
	for (i = count - size; i < count; i++)
	{
		j = j + ((*(s + i) - 48) * m);
		m /= 10;
	}
	return (j * k);
}
1-isdigit.c/    0           0     0     644     273       `
#include "main.h"
#include <ctype.h>

/**
 * _isdigit - a function that checks for a digit (0 through 9)
 * @c: int parameter of my function
 * Return: 1 if c is a digit, otherwise 0
 */
int _isdigit(int c)
{
	if ((c >= 48) && (c <= 57))
	{
		return (1);
	}
	return (0);
}

1-memcpy.c/     0           0     0     644     377       `
#include "main.h"

/**
 * _memcpy - function copies @n bytes from memory area @src
 * to memory area @dest
 *
 * @n: function copies
 *
 * @src: bytes from memory area
 *
 * @dest: to memory area
 *
 * Return: a pointer to @dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{
		dest[i] = src[i];
		i++;
	}

	return (dest);
}

1-strncat.c/    0           0     0     644     271       `
#include "main.h"
#include <string.h>

/**
 * _strncat - function to append some charx
 * @dest: first parameter
 * @src: second parameter
 * @n: 3rd parameter
 * Return: string
 */
char *_strncat(char *dest, char *src, int n)
{
	strncat(dest, src, n);
	return (dest);
}

2-strchr.c/     0           0     0     644     364       `
#include "main.h"
#include <stddef.h>
/**
 * _strchr - locates a character in a string
 *
 * @c: occurrence of the character
 *
 * @s: in the string
 *
 * Return: a pointer to the first occurrence of the character
 */

char *_strchr(char *s, char c)
{
	while (*s)
	{
		if (*s != c)
			s++;
		else
			return (s);
	}
	if (c == '\0')
		return (s);

	return (NULL);
}
2-strlen.c/     0           0     0     644     247       `
#include "main.h"
#include <string.h>
/**
 * _strlen - function to print the length of a string
 *
 * @s: holds the character
 * Return: always 0
 */
int _strlen(char *s)
{
	int len = 0;

	while (*s != '\0')
	{
		len++;
		s++;
	}
	return (len);
}

2-strncpy.c/    0           0     0     644     420       `
#include "main.h"

/**
 * _strncpy - Copy one string to another.
 * @dest: The first string and the destination.
 * @src: The second string.
 * @n: The number of byte to copy from src.
 * Return: dest + src[0 to n] in dest.
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i = 0;

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	for ( ; i < n; i++)
	{
		dest[i] = '\0';
	}
	return (dest);
}
3-islower.c/    0           0     0     644     232       `
#include "main.h"
/**
 * _islower - entry point to check for lowercase
 * @c: Is the int value to be compared with the ASCII value
 * Return: 1
 */
int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (1);
	}
		return (0);
}
3-puts.c/       0           0     0     644     142       `
#include <stdio.h>
/**
 * _puts - printing string to the standard output
 *
 * @str: is the pointer
 */
void _puts(char *str)
{
	puts(str);
}
3-strcmp.c/     0           0     0     644     350       `
/**
 * _strcmp - a function that compares two strings
 *
 * @s1: string 1 input to compare
 * @s2: against this other string 2
 *
 * Return: 0
 */

int _strcmp(char *s1, char *s2)
{
	int i = 0, r;

	while (s1[i] != '\0' && s2[i] != '\0')
	{
		if (s1[i] != s2[i])
		{
			r = s1[i] - s2[i];
			break;
		}
		r = s1[i] - s2[i];
		i++;
	}

	return (r);
}
3-strspn.c/     0           0     0     644     482       `
#include "main.h"

/**
 * _strspn - a function that gets the length of a prefix substring
 *
 * @s: the initial segment of
 *
 * @accept: which consist only of bytes from
 *
 * Return: the number of bytes
 */

unsigned int _strspn(char *s, char *accept)
{
	int z = 0, x, y;

	for (x = 0; s[x] != '\0'; x++)
	{
		if (s[x] != 32)
		{
			for (y = 0; accept[y] != '\0'; y++)
			{
				if (s[x] == accept[y])
				{
					z++;
				}
			}
		}
		else
		{
			return (z);
		}
	}
	return (z);
}
4-isalpha.c/    0           0     0     644     214       `
#include "main.h"
/**
 * _isalpha - to print alphabet
 *
 * @c: holds the value to be compared with ASCII
 *
 * Return: result
 */
int _isalpha(int c)
{
	if (c >= 65 && c <= 122)
	{
		return (1);
	}
	return (0);
}
4-strpbrk.c/    0           0     0     644     441       `
#include "main.h"
#include <stddef.h>

/**
 * _strpbrk - function that searches a string for any of a set of bytes
 *
 * @s:first occurrence in the string
 *
 * @accept: matches one of the bytes, or @NULL if no such byte
 *
 * Return: a pointer to the byte
 */
char *_strpbrk(char *s, char *accept)
{
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
			{
				return (s);
			}
		}
		s++;
	}
	return (NULL);
}

5-strstr.c/     0           0     0     644     567       `
#include "main.h"

/**
 * _strstr - locates a substring
 *
 * @haystack: the longer string to search
 * @needle: the first occurrence of the substring
 *
 * Return: a pointer beg of substring or @Null if it not foound.
 */
char *_strstr(char *haystack, char *needle)
{
	unsigned int i = 0, j = 0;

	while (haystack[i])
	{
		while (needle[j] && (haystack[i] == needle[0]))
		{
			if (haystack[i + j] == needle[j])
			{
				j++;
			}
			else
			{
				break;
			}
		}
		if (needle[j])
		{
			i++;
			j = 0;
		}
		else
		{
			return (haystack + i);
		}
	}
	return (0);
}

6-abs.c/        0           0     0     644     186       `
#include "main.h"
#include <stdlib.h>
/**
 * _abs - prints out the absolute value of an integer
 * @n: the intger
 * Return: result
 */
int _abs(int n)
{
	return (n < 0 ? -1 * n : n);
}
9-strcpy.c/     0           0     0     644     250       `
#include "main.h"
/**
 * _strcpy - entry point
 * @dest: first
 * @src: second
 *
 * Return: Always 0
 */
char *_strcpy(char *dest, char *src)
{
	int i = 0;

	while (src[i] != '\0')
	{
		dest[i] = src[i];
		i++;
	}
	dest[i] = '\0';
	return (dest);
}
main.c/         0           0     0     644     143       `
#include "main.h"

int main(void)
{
	_puts("\"At the end of the day, my goal was to be the best hacker\"\n\t\
-Kevin Mitnick");
	return (0);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

